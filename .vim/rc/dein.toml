# dein.vim config file

[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']
hook_add = """
" let g:airline_theme = 'gruvbox'
" let g:airline_theme = 'dracula'
let g:airline_theme = 'sol'
" nmap <C-p> <Plug>AirlineSelectPrevTab
" nmap <C-n> <Plug>AirlineSelectNextTab
" let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#tabline#buffer_idx_mode = 1
" let g:airline#extensions#whitespace#mixed_indent_algo = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
"""

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'yuttie/comfortable-motion.vim'
hook_add = """
let g:comfortable_motion_scroll_down_key = "j"
let g:comfortable_motion_scroll_up_key = "k"
let g:comfortable_motion_friction =  200.0
let g:comfortable_motion_air_drag = 1.8
let g:comfortable_motion_no_default_key_mappings = 1
let g:comfortable_motion_impulse_multiplier = 1  " Feel free to increase/decrease this value.
nnoremap <silent> <C-d> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * 2)<CR>
nnoremap <silent> <C-u> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * -2)<CR>
nnoremap <silent> <C-f> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * 4)<CR>
nnoremap <silent> <C-b> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * -4)<CR>
"""

[[plugins]]
repo = 'morhetz/gruvbox'

[[plugins]]
repo = 'kana/vim-submode'

# [[plugins]]
# repo = 'scrooloose/nerdtree'
# hook_add = """
# nnoremap <Space>z :NERDTreeToggle<CR>
# " let g:NERDTreeDirArrows = 0
# " let g:NERDTreeDirArrowExpandable  = '>'
# " let g:NERDTreeDirArrowCollapsible = 'V'
# " if !has('gui_running')
# "   autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
# "   autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
# " endif
# let g:NERDTreeIgnore=[
#   \ '\.aux$', '\.bbl$', '\.blg$', '\.dvi$', '\.fdb_latexmk$', '\.fls$', '\.synctex\.gz$', '\.toc$',
#   \ '\.pdf$', '\.eps$',
#   \ '\.png$',
#   \ '\.ipynb$',
#   \ '^\.git$[[dir]]',
#   \ ]
# """

[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['kristijanhusak/defx-git']
hook_add = """
nnoremap <silent> <Space>z :Defx
  \ -columns=git:indent:icons:filename
  \ -toggle -split=vertical -winwidth=30 -direction=topleft<CR>
nnoremap <silent> <Space><S-z> :Defx
  \ -columns=git:indent:icons:filename:type:size:time
  \ -toggle -split=horizontal -winheight=20 -direction=botright<CR>
autocmd FileType defx call s:defx_my_settings()
autocmd FileType defx set nonumber
function! s:defx_my_settings() abort
  " Define mappings
  " nnoremap <silent><buffer><expr> <CR> defx#do_action('open')
  nnoremap <silent><buffer><expr> <CR> defx#do_action('drop')
  nnoremap <silent><buffer><expr> cc
  \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
  \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
  \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> t
  \ defx#do_action('open_or_close_tree')
  nnoremap <silent><buffer><expr> E
  \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
  \ defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> K
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
  \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
  \ defx#do_action('toggle_columns',
  \                'mark:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
  \ defx#do_action('toggle_sort', 'time')
  " nnoremap <silent><buffer><expr> dd
  " \ defx#do_action('remove_trash')
  nnoremap <silent><buffer><expr> r
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
  \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x
  \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
  \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
  \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
  \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
  \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
  \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
  \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
  \ defx#do_action('change_vim_cwd')
endfunction
call defx#custom#column('mark', {
      \ 'readonly_icon': '✗',
      \ 'selected_icon': '✓',
      \ })
"""

[[plugins]]
repo = 'kristijanhusak/defx-git'

[[plugins]]
repo = 'kristijanhusak/defx-icons'

# [[plugins]]
# repo = 'tiagofumo/vim-nerdtree-syntax-highlight'


[[plugins]]
repo = 'tyru/caw.vim'
hook_add = """
let g:caw_operator_keymappings = 1
map <Space>c gcc
nmap <Space>cc gcc$
"""

[[plugins]]
repo = 'glts/vim-textobj-comment'
depends = ['kana/vim-textobj-user']

# [[plugins]]
# repo = 'scrooloose/nerdcommenter'
# hook_add = """
# let g:NERDSpaceDelims = 1  " コメント時に挿入するスペース
# let g:NERDCommentEmptyLines = 1 " 空行のコメントを許す
# """

[[plugins]]
repo = 'tpope/vim-surround'
# char2nr 関数を使えば文字に対応する数字を知ることができる
hook_add = """
nmap sa ys
vmap sa S
let g:surround_{char2nr("P")} = "（\r）"
let g:surround_{char2nr("B")} = "「\r」"
let g:surround_{char2nr("D")} = "『\r』"
let g:surround_{char2nr("m")} = "{{{\r}}}"
" 例えば saiwB とすることで \{word\} などとできる
autocmd FileType tex let b:surround_{char2nr("B")} = "\\\\{\r\\\\}"
"""


[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = ['kana/vim-operator-user']
# " map sa <Plug>(operator-surround-append)
# " map sd <Plug>(operator-surround-delete)a
# map sr <Plug>(operator-surround-replace)a
# map sa ys
# let g:operator#surround#blocks = {}
hook_add = """
" let g:operator#surround#blocks['tex'] = [
"     \   { 'block' : ['\{', '\}'], 'motionwise' : ['char', 'line', 'block'], 'keys' : ['B'] },
"     \ ]
nmap dsP <Plug>(operator-surround-delete)aP
nmap dsB <Plug>(operator-surround-delete)aB
nmap dsD <Plug>(operator-surround-delete)aD
nmap csP <Plug>(operator-surround-replace)aP
nmap csB <Plug>(operator-surround-replace)aB
nmap csD <Plug>(operator-surround-replace)aD
let g:operator#surround#blocks = {}
let g:operator#surround#blocks['-'] = [
    \   { 'block' : ['（', '）'], 'motionwise' : ['char', 'line', 'block'], 'keys' : ['P'] },
    \   { 'block' : ['「', '」'], 'motionwise' : ['char', 'line', 'block'], 'keys' : ['B'] },
    \   { 'block' : ['『', '』'], 'motionwise' : ['char', 'line', 'block'], 'keys' : ['D'] },
    \ ]
"""


[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-textobj-user'
hook_add = """
call textobj#user#plugin('line', {
\   '-': {
\     'select-a-function': 'CurrentLineA',
\     'select-a': 'al',
\     'select-i-function': 'CurrentLineI',
\     'select-i': 'il',
\   },
\ })

function! CurrentLineA()
  normal! 0
  let head_pos = getpos('.')
  normal! $
  let tail_pos = getpos('.')
  return ['v', head_pos, tail_pos]
endfunction

function! CurrentLineI()
  normal! ^
  let head_pos = getpos('.')
  normal! g_
  let tail_pos = getpos('.')
  let non_blank_char_exists_p = getline('.')[head_pos[2] - 1] !~# '\s'
  return
  \ non_blank_char_exists_p
  \ ? ['v', head_pos, tail_pos]
  \ : 0
endfunction

call textobj#user#plugin('jbraces', {
    \   'parens': {
    \       'pattern': ['（', '）'],
    \       'select-a': 'aP', 'select-i': 'iP'
    \  },
    \   'braces': {
    \       'pattern': ['「', '」'],
    \       'select-a': 'aB', 'select-i': 'iB'
    \  },
    \  'double-braces': {
    \       'pattern': ['『', '』'],
    \       'select-a': 'aD', 'select-i': 'iD'
    \  },
    \})
"""

# [[plugins]]
# repo = 'LeafCage/foldCC'
# hook_add = """
# " set foldtext=FoldCCtext()
# " set foldcolumn=3
# " set fillchars=vert:\|
# " let g:foldCCtext_tail = 'printf("   %s[%4d lines  Lv%-2d]%s",
# " \ v:folddashes, v:foldend-v:foldstart+1, v:foldlevel, v:folddashes)'
# "
# " hi Folded gui=bold term=standout ctermbg=LightGrey ctermfg=DarkBlue guibg=Grey30 guifg=Grey80
# " hi FoldColumn gui=bold term=standout ctermbg=LightGrey ctermfg=DarkBlue guibg=Grey guifg=DarkBlue
# """

# [[plugins]]
# repo = 'tweekmonster/braceless.vim'
# hook_add = """
# autocmd FileType python,yaml BracelessEnable +fold
# """

# [[plugins]]
# repo = 'lervag/vimtex'

# [[plugins]]
# repo = 'Rykka/riv.vim'

# [[plugins]]
# repo = 'davidhalter/jedi-vim'

# [[plugins]]
# repo = 'jsfaint/gen_tags.vim'
# hook_add = """
# let g:gen_tags#ctags_auto_gen = 1
# let g:gen_tags#gtags_auto_gen = 1
# """

[[plugins]]
repo = 'kshenoy/vim-signature'
hook_add = """
let g:SignatureIncludeMarks = 'abcdefghijklmnopqrstuvwxyABCDEFGHIJKLMNOPQRSTUVWXYZ'
"""

# [[plugins]]
# repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'Konfekt/FastFold'


[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = """
nnoremap <Space>b :Denite buffer -mode="normal" -sorters=sorter/word<CR>
nnoremap <Space>r :Denite register<CR>
nnoremap <Space>g :Denite grep -buffer-name=search-buffer-denite<CR>
nnoremap <Space>t :Denite grep -input=TODO: -mode="normal"<CR>
nnoremap <Space>G :Denite -resume -buffer-name=search-buffer-denite<CR>
nnoremap <Space>] :<C-u>Denite -resume -buffer-name=search-buffer-denite -select=+1 -immediately<CR>
nnoremap <Space>[ :<C-u>Denite -resume -buffer-name=search-buffer-denite -select=-1 -immediately<CR>
nnoremap <Space>o :Denite file/rec<CR>
nnoremap <Space><Space> :Denite<Space>
call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
      \ [ '.git/', '.ropeproject/', '__pycache__/',
      \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/',
      \   '*.aux', '*.bbl', '*.blg', '*.dvi', '*.fdb_latexmk', '*.fls', '*.synctex.gz', '*.toc',
      \   '*.out', '*.snm', '*.nav',
      \   '*.pdf', '*.eps', '*.svg',
      \   '*.png',
      \   'searchindex.js',
      \   '*.ipynb',
      \   ])
call denite#custom#source('grep',
  \ 'matchers', ['converter/abbr_word', 'matcher_fuzzy', 'matcher/ignore_globs'],
  \ )
call denite#custom#source('file/rec',
  \ 'matchers', ['matcher_fuzzy', 'matcher/ignore_globs'])
call denite#custom#var('buffer', 'date_format', '')
call denite#custom#source('buffer', 'matchers', ['converter/abbr_word', 'matcher/substring'])
"""


[[plugins]]
repo = 'xolox/vim-session'
depends = ['xolox/vim-misc']
hook_add = """
let s:local_session_directory = xolox#misc#path#merge(getcwd(), '.vimsessions')
" 存在すれば
if isdirectory(s:local_session_directory)
  " session保存ディレクトリをそのディレクトリの設定
  let g:session_directory = s:local_session_directory
  " vimを辞める時に自動保存
  let g:session_autosave = 'yes'
  " 引数なしでvimを起動した時にsession保存ディレクトリのdefault.vimを開く
  let g:session_autoload = 'yes'
  " 1分間に1回自動保存
  " let g:session_autosave_periodic = 1
else
  let g:session_autosave = 'no'
  let g:session_autoload = 'no'
endif
unlet s:local_session_directory
"""


[[plugins]]
repo = 'xolox/vim-misc'


[[plugins]]
repo = 'qnighy/satysfi.vim'


# hook_post_update = 'call hook#post_update#language_client_neovim#load()'
# hook_add = 'call hook#add#language_client_neovim#load()'
